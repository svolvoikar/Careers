//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(TEK_Careers.Domain.Model.TekCareersEntities),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySetsb64ae51ef81384efbda41f874d61534ae41e5618c31a64d461bbc9893e79ac0e))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework 6 Power Tools", "0.9.5.0")]
    internal sealed class ViewsForBaseEntitySetsb64ae51ef81384efbda41f874d61534ae41e5618c31a64d461bbc9893e79ac0e : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "b64ae51ef81384efbda41f874d61534ae41e5618c31a64d461bbc9893e79ac0e"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "ModelStoreContainer.Departments")
            {
                return GetView0();
            }

            if (extentName == "ModelStoreContainer.Jobs")
            {
                return GetView1();
            }

            if (extentName == "ModelStoreContainer.Locations")
            {
                return GetView2();
            }

            if (extentName == "TekCareersEntities.Departments")
            {
                return GetView3();
            }

            if (extentName == "TekCareersEntities.Jobs")
            {
                return GetView4();
            }

            if (extentName == "TekCareersEntities.Locations")
            {
                return GetView5();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for ModelStoreContainer.Departments.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Departments
        [Model.Store.Departments](T1.Departments_ID, T1.Departments_Title, T1.Departments_CreatedDate, T1.Departments_UpdatedDate, T1.Departments_IsActive)
    FROM (
        SELECT 
            T.ID AS Departments_ID, 
            T.Title AS Departments_Title, 
            T.CreatedDate AS Departments_CreatedDate, 
            T.UpdatedDate AS Departments_UpdatedDate, 
            T.IsActive AS Departments_IsActive, 
            True AS _from0
        FROM TekCareersEntities.Departments AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelStoreContainer.Jobs.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Jobs
        [Model.Store.Jobs](T1.Jobs_ID, T1.Jobs_Code, T1.Jobs_Title, T1.Jobs_Description, T1.Jobs_DepartmentID, T1.Jobs_LocationID, T1.Jobs_PostedDate, T1.Jobs_ClosingDate, T1.Jobs_CreatedDate, T1.Jobs_UpdatedDate, T1.Jobs_IsActive)
    FROM (
        SELECT 
            T.ID AS Jobs_ID, 
            T.Code AS Jobs_Code, 
            T.Title AS Jobs_Title, 
            T.Description AS Jobs_Description, 
            T.DepartmentID AS Jobs_DepartmentID, 
            T.LocationID AS Jobs_LocationID, 
            T.PostedDate AS Jobs_PostedDate, 
            T.ClosingDate AS Jobs_ClosingDate, 
            T.CreatedDate AS Jobs_CreatedDate, 
            T.UpdatedDate AS Jobs_UpdatedDate, 
            T.IsActive AS Jobs_IsActive, 
            True AS _from0
        FROM TekCareersEntities.Jobs AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelStoreContainer.Locations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Locations
        [Model.Store.Locations](T1.Locations_ID, T1.Locations_Title, T1.Locations_City, T1.Locations_State, T1.Locations_Country, T1.Locations_Zip, T1.Locations_CreatedDate, T1.Locations_UpdatedDate, T1.Locations_IsActive)
    FROM (
        SELECT 
            T.ID AS Locations_ID, 
            T.Title AS Locations_Title, 
            T.City AS Locations_City, 
            T.State AS Locations_State, 
            T.Country AS Locations_Country, 
            T.Zip AS Locations_Zip, 
            T.CreatedDate AS Locations_CreatedDate, 
            T.UpdatedDate AS Locations_UpdatedDate, 
            T.IsActive AS Locations_IsActive, 
            True AS _from0
        FROM TekCareersEntities.Locations AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for TekCareersEntities.Departments.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Departments
        [Model.Department](T1.Department_ID, T1.Department_Title, T1.Department_CreatedDate, T1.Department_UpdatedDate, T1.Department_IsActive)
    FROM (
        SELECT 
            T.ID AS Department_ID, 
            T.Title AS Department_Title, 
            T.CreatedDate AS Department_CreatedDate, 
            T.UpdatedDate AS Department_UpdatedDate, 
            T.IsActive AS Department_IsActive, 
            True AS _from0
        FROM ModelStoreContainer.Departments AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for TekCareersEntities.Jobs.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Jobs
        [Model.Job](T1.Job_ID, T1.Job_Code, T1.Job_Title, T1.Job_Description, T1.Job_DepartmentID, T1.Job_LocationID, T1.Job_PostedDate, T1.Job_ClosingDate, T1.Job_CreatedDate, T1.Job_UpdatedDate, T1.Job_IsActive)
    FROM (
        SELECT 
            T.ID AS Job_ID, 
            T.Code AS Job_Code, 
            T.Title AS Job_Title, 
            T.Description AS Job_Description, 
            T.DepartmentID AS Job_DepartmentID, 
            T.LocationID AS Job_LocationID, 
            T.PostedDate AS Job_PostedDate, 
            T.ClosingDate AS Job_ClosingDate, 
            T.CreatedDate AS Job_CreatedDate, 
            T.UpdatedDate AS Job_UpdatedDate, 
            T.IsActive AS Job_IsActive, 
            True AS _from0
        FROM ModelStoreContainer.Jobs AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for TekCareersEntities.Locations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Locations
        [Model.Location](T1.Location_ID, T1.Location_Title, T1.Location_City, T1.Location_State, T1.Location_Country, T1.Location_Zip, T1.Location_CreatedDate, T1.Location_UpdatedDate, T1.Location_IsActive)
    FROM (
        SELECT 
            T.ID AS Location_ID, 
            T.Title AS Location_Title, 
            T.City AS Location_City, 
            T.State AS Location_State, 
            T.Country AS Location_Country, 
            T.Zip AS Location_Zip, 
            T.CreatedDate AS Location_CreatedDate, 
            T.UpdatedDate AS Location_UpdatedDate, 
            T.IsActive AS Location_IsActive, 
            True AS _from0
        FROM ModelStoreContainer.Locations AS T
    ) AS T1");
        }
    }
}
